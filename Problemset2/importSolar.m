%% Import data from text file.
% Script for importing data from the following text file:
%
%    C:\Users\Margreet-PC\Documents\MATLAB\EnvPHYSICSNEW\Problemset2\cabauw_2012_Env_Phys.dat
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2018/04/19 12:35:34

%% Initialize variables.
filename = 'C:\Users\Margreet-PC\Documents\MATLAB\EnvPHYSICSNEW\Problemset2\cabauw_2012_Env_Phys.dat';

%% Read columns of data as strings:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%*242s%9s%9s%8s%8s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', '', 'WhiteSpace', '',  'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric strings to numbers.
% Replace non-numeric strings with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,2,3,4]
    % Converts strings in the input cell array to numbers. Replaced non-numeric
    % strings with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(numbers, thousandsRegExp, 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric strings to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),raw); % Find non-numeric cells
raw(R) = {NaN}; % Replace non-numeric cells

%% Allocate imported array to column variable names
LW_up = cell2mat(raw(:, 1));
LW_dn = cell2mat(raw(:, 2));
SW_up = cell2mat(raw(:, 3));
SW_dn = cell2mat(raw(:, 4));

%% Remove the rows that have invalid values
% wrongValue = -9999;
% 
% for i = 2:1:length(LW_up)
%   cond1 = LW_up(i) ~= wrongValue;
%   cond2 = LW_dn(i) ~= wrongValue;
%   cond3 = SW_up(i) ~= wrongValue;
%   cond4 = SW_dn(i) ~= wrongValue;
%   cond5 = cond1 && cond2 && cond3 && cond4;
%   if (~cond5)
%       LW_up(i,:) = [];
%       LW_dn(i,:) = [];
%       SW_up(i,:) = [];
%       SW_dn(i,:) = [];
%       i=i-1;
%   end   
% end


%% Clear temporary variables
clearvars filename formatSpec fileID dataArray ans raw col numericData rawData row regexstr result numbers invalidThousandsSeparator thousandsRegExp me R;